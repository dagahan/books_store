name: books_store


services:
  nginx:
    build:
      context: ./nginx
      dockerfile: dockerfile
    image: nginx-${COMPOSE_PROJECT_NAME}
    container_name: nginx-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    networks:
      - books_store_net
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./nginx


  gateway:
    build:
      context: ./gateway
      dockerfile: dockerfile
    image: gateway-${COMPOSE_PROJECT_NAME}
    container_name: gateway-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      - books_store_net
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./gateway


  authorizer:
    build:
      context: ./authorizer
      dockerfile: dockerfile
    image: authorizer-${COMPOSE_PROJECT_NAME}
    container_name: authorizer-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${AUTHORIZER_PORT}:${AUTHORIZER_PORT}"
    networks:
      - books_store_net
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


  catalog:
    build:
      context: ./catalog
      dockerfile: dockerfile
    image: catalog-${COMPOSE_PROJECT_NAME}
    container_name: catalog-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${CATALOG_PORT}:${CATALOG_PORT}"
    networks:
      - books_store_net
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


  valkey:
    build:
      context: ./valkey
      dockerfile: dockerfile
    image: valkey-${COMPOSE_PROJECT_NAME}
    container_name: valkey-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${VALKEY_PORT}:${VALKEY_PORT}"
    networks:
      - books_store_net
    volumes:
      - ./valkey-data:/var/lib/valkey/data
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


  postgres:
    build:
      context: ./postgres
      dockerfile: dockerfile
    image: postgres-${COMPOSE_PROJECT_NAME}
    container_name: postgres-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - books_store_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


networks:
  books_store_net:
    driver: bridge
    name: books_store_net
